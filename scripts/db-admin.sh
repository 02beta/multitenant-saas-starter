#!/bin/bash

# -----------------------------------------------------------------------------
# Example usage of db-admin.sh functions
#
# 1. Print usage/help:
#    ./scripts/db-admin.sh
#    ./scripts/db-admin.sh help
#
# 2. Initialize project (creates env files, starts Supabase, sets vars):
#    ./scripts/db-admin.sh init
#
# 3. Ensure SUPABASE_WORKDIR is set in .env.local:
#    # (This is called automatically by set-vars, but can be run directly)
#    bash -c 'source scripts/db-admin.sh; ensure_supabase_workdir'
#
# 4. Set all required Supabase env vars in .env.local (no duplicates):
#    ./scripts/db-admin.sh set-vars
#
# 5. Start Supabase (restarts if already running):
#    ./scripts/db-admin.sh start
#
# 6. Stop Supabase:
#    ./scripts/db-admin.sh stop
#
# 7. Reset Supabase database (stops with reset and restarts):
#    ./scripts/db-admin.sh reset-db
#
# 8. Create new Supabase project in cloud:
#    ./scripts/db-admin.sh create-new-project
#
# -----------------------------------------------------------------------------

# Configuration
# Get project ID from Supabase config directory dynamically
SUPABASE_PROJECT_ID=$(grep -E '^project_id\s*=' infra/supabase/config.toml | sed 's/.*=\s*"\([^"]*\)".*/\1/')
if [ -z "$SUPABASE_PROJECT_ID" ]; then
  echo "Error: Could not find project_id in infra/supabase/config.toml"
  exit 1
fi

set -e

# Helper: Print usage
usage() {
  echo "Usage: $0 <command>"
  echo
  echo "Commands:"
  echo "  init               Initialize project with env files, start Supabase, and set vars"
  echo "  set-vars           Ensure all required Supabase env vars are present in"
  echo "                     .env.local without duplicates"
  echo "  start              Start Supabase (restarts if already running)"
  echo "  stop               Stop Supabase"
  echo "  reset-db           Reset Supabase database (stops with reset and restarts)"
  echo "  create-new-project Create new Supabase project in cloud and link it"
  echo
  exit 1
}

# Ensure SUPABASE_WORKDIR is always set to 'infra' in .env.local, without
# duplicates
ensure_supabase_workdir() {
  ENV_FILE=".env.local"
  KEY="SUPABASE_WORKDIR"
  VALUE="infra"

  if [ ! -f "$ENV_FILE" ]; then
    echo "$KEY=$VALUE" > "$ENV_FILE"
    echo "Added $KEY=$VALUE to $ENV_FILE"
    return
  fi

  if grep -q "^$KEY=" "$ENV_FILE"; then
    # Replace any existing SUPABASE_WORKDIR line with the correct value
    sed -i.bak "/^$KEY=/d" "$ENV_FILE"
    rm -f "$ENV_FILE.bak"
  fi
  echo "$KEY=$VALUE" >> "$ENV_FILE"
}

# Check if Supabase is running (returns 0 if running, 1 if not)
is_supabase_running() {
  # supabase status returns 0 if running, 1 if not
  supabase status >/dev/null 2>&1
}

# Parse DATABASE_URL to extract components
parse_database_url() {
  local db_url="$1"
  # Extract components from postgresql://user:password@host:port/database
  DB_USER=$(echo "$db_url" | sed -n 's|.*://\([^:]*\):.*|\1|p')
  DB_PASSWORD=$(echo "$db_url" | sed -n 's|.*://[^:]*:\([^@]*\)@.*|\1|p')
  DB_HOST=$(echo "$db_url" | sed -n 's|.*@\([^:]*\):.*|\1|p')
  DB_PORT=$(echo "$db_url" | sed -n 's|.*:\([0-9]*\)/.*|\1|p')
  DB_NAME=$(echo "$db_url" | sed -n 's|.*/\([^?]*\).*|\1|p')
}

# Add database env vars to a file
add_database_vars_to_file() {
  local env_file="$1"
  local db_url="$2"
  local tmp_file
  tmp_file="$(mktemp)"

  parse_database_url "$db_url"

  # Add DATABASE_* vars if they don't exist
  if ! grep -q "^DATABASE_HOST=" "$env_file"; then
    echo "DATABASE_HOST=$DB_HOST" >> "$tmp_file"
    echo "Added: DATABASE_HOST=$DB_HOST to $env_file"
  fi

  if ! grep -q "^DATABASE_PORT=" "$env_file"; then
    echo "DATABASE_PORT=$DB_PORT" >> "$tmp_file"
    echo "Added: DATABASE_PORT=$DB_PORT to $env_file"
  fi

  if ! grep -q "^DATABASE_USER=" "$env_file"; then
    echo "DATABASE_USER=$DB_USER" >> "$tmp_file"
    echo "Added: DATABASE_USER=$DB_USER to $env_file"
  fi

  if ! grep -q "^DATABASE_PASSWORD=" "$env_file"; then
    echo "DATABASE_PASSWORD=$DB_PASSWORD" >> "$tmp_file"
    echo "Added: DATABASE_PASSWORD=$DB_PASSWORD to $env_file"
  fi

  if ! grep -q "^DATABASE_NAME=" "$env_file"; then
    echo "DATABASE_NAME=$DB_NAME" >> "$tmp_file"
    echo "Added: DATABASE_NAME=$DB_NAME to $env_file"
  fi

  # Append to file if we have new vars
  if [ -s "$tmp_file" ]; then
    cat "$tmp_file" >> "$env_file"
  fi

  rm -f "$tmp_file"
}

# Command: init
init_project() {
  echo "üöÄ Initializing project..."

  # Export SUPABASE_WORKDIR first
  export SUPABASE_WORKDIR="infra"

  # Get the parent directory name (monorepo name) - this is the very first thing we do
  MONOREPO_NAME=$(basename "$(pwd)")

  # Create infra/supabase directory if it doesn't exist
  mkdir -p "infra/supabase"

  # Create or replace .env file in infra/supabase directory
  SUPABASE_ENV_FILE="infra/supabase/.env"
  echo "Creating $SUPABASE_ENV_FILE..."

  cat > "$SUPABASE_ENV_FILE" << EOF
# Supabase Environment Configuration
# Generated by ./scripts/db-admin.sh init
SUPABASE_PROJECT_ID=$MONOREPO_NAME
SUPABASE_CLOUD_REGION=us-west-1
EOF

  # Check if Homebrew is installed
  if ! command -v brew >/dev/null 2>&1; then
    echo "Error: Homebrew is not installed. Please install Homebrew first:" >&2
    echo "Visit https://brew.sh/ for installation instructions." >&2
    exit 1
  fi

  # Check if Supabase CLI is installed, install if not
  if ! command -v supabase >/dev/null 2>&1; then
    echo "üì¶ Supabase CLI not found. Installing via Homebrew..."
    brew install supabase/tap/supabase
    echo "‚úÖ Supabase CLI installed successfully."
  else
    echo "‚úÖ Supabase CLI is already installed."
  fi

  # Add OPENAI_API_KEY if it exists in environment
  if [ -n "$OPENAI_API_KEY" ]; then
    echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> "$SUPABASE_ENV_FILE"
    echo "Added OPENAI_API_KEY from environment to $SUPABASE_ENV_FILE"
  else
    echo "‚ö†Ô∏è  Warning: OPENAI_API_KEY not found in environment. You may need to set this manually."
  fi

  echo "‚úÖ Created $SUPABASE_ENV_FILE"

  # Update config.toml to use the dynamic project_id
  CONFIG_FILE="infra/supabase/config.toml"
  if [ -f "$CONFIG_FILE" ]; then
    # Replace project_id line with dynamic value
    sed -i.bak "s/^project_id\s*=.*/project_id = \"$MONOREPO_NAME\"/" "$CONFIG_FILE"
    rm -f "$CONFIG_FILE.bak"
    echo "‚úÖ Updated project_id in $CONFIG_FILE to: $MONOREPO_NAME"
  else
    echo "‚ö†Ô∏è  Warning: $CONFIG_FILE not found. You may need to run 'supabase init' first."
  fi

  # Update the global SUPABASE_PROJECT_ID variable
  SUPABASE_PROJECT_ID="$MONOREPO_NAME"

  echo "üîÑ Starting Supabase..."
  start_supabase

  echo "‚öôÔ∏è  Setting environment variables..."
  set_vars

  echo "‚úÖ Project initialization complete!"
  echo "üìÅ Files created/updated:"
  echo "   - $SUPABASE_ENV_FILE"
  echo "   - .env.local (root)"
  echo "   - apps/api/.env.local"
  if [ -f "$CONFIG_FILE" ]; then
    echo "   - $CONFIG_FILE"
  fi
}

# Command: create-new-project
create_new_project() {
  echo "üöÄ Creating new Supabase project in cloud..."

  if ! command -v supabase >/dev/null 2>&1; then
    echo "Error: Supabase CLI is not installed. Please install it before" \
      "running this command." >&2
    exit 1
  fi

  SUPABASE_ENV_FILE="infra/supabase/.env"

  # Check if the env file exists
  if [ ! -f "$SUPABASE_ENV_FILE" ]; then
    echo "Error: $SUPABASE_ENV_FILE not found. Please run 'init' command first." >&2
    exit 1
  fi

  # Source the environment variables from the Supabase env file
  set -a
  # shellcheck disable=SC1090
  source "$SUPABASE_ENV_FILE"
  set +a

  # Check if required variables are set
  if [ -z "$SUPABASE_PROJECT_ID" ]; then
    echo "Error: SUPABASE_PROJECT_ID not found in $SUPABASE_ENV_FILE" >&2
    exit 1
  fi

  if [ -z "$SUPABASE_CLOUD_REGION" ]; then
    echo "Error: SUPABASE_CLOUD_REGION not found in $SUPABASE_ENV_FILE" >&2
    exit 1
  fi

  # Generate production DB password if not set
  if [ -z "$SUPABASE_PRODUCTION_DB_PASSWORD" ]; then
    SUPABASE_PRODUCTION_DB_PASSWORD=$(openssl rand -hex 16)
    echo "SUPABASE_PRODUCTION_DB_PASSWORD=$SUPABASE_PRODUCTION_DB_PASSWORD" >> "$SUPABASE_ENV_FILE"
    echo "Generated and added SUPABASE_PRODUCTION_DB_PASSWORD to $SUPABASE_ENV_FILE"
  fi

  echo "Creating Supabase project with:"
  echo "  Name: $SUPABASE_PROJECT_ID"
  echo "  Region: $SUPABASE_CLOUD_REGION"
  echo "  Password: [HIDDEN]"

  # Create the project and capture the project reference
  PROJECT_OUTPUT=$(supabase projects create "$SUPABASE_PROJECT_ID" \
    --region "$SUPABASE_CLOUD_REGION" \
    --db-password "$SUPABASE_PRODUCTION_DB_PASSWORD" 2>&1)

  if [ $? -ne 0 ]; then
    echo "Error creating Supabase project:" >&2
    echo "$PROJECT_OUTPUT" >&2
    exit 1
  fi

  # Extract project reference from output
  SUPABASE_PROJECT_REF=$(echo "$PROJECT_OUTPUT" | grep -o '[a-z0-9]\{20\}' | head -1)

  if [ -z "$SUPABASE_PROJECT_REF" ]; then
    echo "Error: Could not extract project reference from output:" >&2
    echo "$PROJECT_OUTPUT" >&2
    exit 1
  fi

  echo "‚úÖ Project created successfully with reference: $SUPABASE_PROJECT_REF"

  # Add or update SUPABASE_PROJECT_REF in the env file
  if grep -q "^SUPABASE_PROJECT_REF=" "$SUPABASE_ENV_FILE"; then
    # Replace existing line
    sed -i.bak "s/^SUPABASE_PROJECT_REF=.*/SUPABASE_PROJECT_REF=$SUPABASE_PROJECT_REF/" "$SUPABASE_ENV_FILE"
    rm -f "$SUPABASE_ENV_FILE.bak"
    echo "Updated SUPABASE_PROJECT_REF in $SUPABASE_ENV_FILE"
  else
    # Add new line
    echo "SUPABASE_PROJECT_REF=$SUPABASE_PROJECT_REF" >> "$SUPABASE_ENV_FILE"
    echo "Added SUPABASE_PROJECT_REF to $SUPABASE_ENV_FILE"
  fi

  # Link the project
  echo "üîó Linking project..."
  supabase link --project-ref "$SUPABASE_PROJECT_REF" -p "$SUPABASE_PRODUCTION_DB_PASSWORD"

  if [ $? -eq 0 ]; then
    echo "‚úÖ Project linked successfully!"
    echo "üìÅ Project details:"
    echo "   - Project ID: $SUPABASE_PROJECT_ID"
    echo "   - Project Reference: $SUPABASE_PROJECT_REF"
    echo "   - Region: $SUPABASE_CLOUD_REGION"
    echo "   - Environment file: $SUPABASE_ENV_FILE"
  else
    echo "Error: Failed to link project" >&2
    exit 1
  fi
}

# Command: set-vars
set_vars() {
  ENV_FILE=".env.local"
  API_ENV_FILE="apps/api/.env.local"
  TMP_FILE="$(mktemp)"
  DATABASE_URL_VALUE=""

  if ! command -v supabase >/dev/null 2>&1; then
    echo "Error: supabase CLI is not installed. Please install it before" \
      "running this command." >&2
    exit 1
  fi

  # Check if Supabase is running before proceeding
  if ! is_supabase_running; then
    echo "Supabase is not running. Please run './scripts/db-admin.sh start' first."
    return
  fi

  if [ ! -f "$ENV_FILE" ]; then
    touch "$ENV_FILE"
    echo "Created $ENV_FILE"
  fi

  # Get required Supabase env vars (ignoring comments, only lines with key=value)
  supabase status -o env | grep -v '^#' | awk -F= 'NF==2' | \
    while IFS= read -r line; do
      var=$(echo "$line" | cut -d= -f1)
      value=$(echo "$line" | cut -d= -f2-)

      # Handle special case for DB_URL - rename to DATABASE_URL and create async version
      if [[ "$var" == "DB_URL" ]]; then
        # Add DATABASE_URL (sync version)
        if ! grep -q "^DATABASE_URL=" "$ENV_FILE"; then
          echo "DATABASE_URL=$value" >> "$TMP_FILE"
          echo "Added: DATABASE_URL=$value"
        fi
        # Add DATABASE_ASYNC_URL (async version)
        async_url="${value/postgresql:/postgresql+asyncpg:}"
        if ! grep -q "^DATABASE_ASYNC_URL=" "$ENV_FILE"; then
          echo "DATABASE_ASYNC_URL=$async_url" >> "$TMP_FILE"
          echo "Added: DATABASE_ASYNC_URL=$async_url"
        fi
        # shellcheck disable=SC2030
        DATABASE_URL_VALUE="$value"
        continue
      fi

      # Prefix variable with SUPABASE_ if not already present
      if [[ "$var" != SUPABASE_* ]]; then
        prefixed_var="SUPABASE_$var"
        # Replace the variable name in the line with the prefixed version
        line="SUPABASE_$line"
      else
        prefixed_var="$var"
      fi
      # If the prefixed variable is not already present in .env.local, append it
      if ! grep -q "^$prefixed_var=" "$ENV_FILE"; then
        echo "$line" >> "$TMP_FILE"
        echo "Added: $line"
      fi
    done

  if [ -s "$TMP_FILE" ]; then
    # Insert a blank line, header, blank line, then the new vars, then a blank line
    {
      echo
      echo "# Supabase DO NOT EDIT (added by ./scripts/db-admin.sh set-vars)"
      echo "# ------------------------------------------------------------"
      cat "$TMP_FILE"
      ensure_supabase_workdir
    } >> "$ENV_FILE"
    echo
    echo "‚úÖ All missing Supabase env vars have been added to $ENV_FILE."
  else
    echo "All required Supabase env vars are already present in $ENV_FILE."
  fi

  rm -f "$TMP_FILE"

  # Get DATABASE_URL from the env file if we didn't capture it above
  if [ -z "$DATABASE_URL_VALUE" ]; then
    DATABASE_URL_VALUE=$(grep "^DATABASE_URL=" "$ENV_FILE" | cut -d= -f2-)
  fi

  # Add database component vars to root .env.local
  if [ -n "$DATABASE_URL_VALUE" ]; then
    add_database_vars_to_file "$ENV_FILE" "$DATABASE_URL_VALUE"
  fi

  # Create apps/api directory if it doesn't exist
  mkdir -p "apps/api"

  # Create or update apps/api/.env.local
  if [ ! -f "$API_ENV_FILE" ]; then
    touch "$API_ENV_FILE"
    echo "Created $API_ENV_FILE"
  fi

  # Add database vars to API env file
  if [ -n "$DATABASE_URL_VALUE" ]; then
    # Add DATABASE_URL and DATABASE_ASYNC_URL to API env file
    if ! grep -q "^DATABASE_URL=" "$API_ENV_FILE"; then
      echo "DATABASE_URL=$DATABASE_URL_VALUE" >> "$API_ENV_FILE"
      echo "Added: DATABASE_URL to $API_ENV_FILE"
    fi

    async_url="${DATABASE_URL_VALUE/postgresql:/postgresql+asyncpg:}"
    if ! grep -q "^DATABASE_ASYNC_URL=" "$API_ENV_FILE"; then
      echo "DATABASE_ASYNC_URL=$async_url" >> "$API_ENV_FILE"
      echo "Added: DATABASE_ASYNC_URL to $API_ENV_FILE"
    fi

    # Add database component vars to API env file
    add_database_vars_to_file "$API_ENV_FILE" "$DATABASE_URL_VALUE"
  fi

  # Handle SUPABASE_PRODUCTION_DB_PASSWORD
  PROD_DB_PASSWORD=""
  if grep -q "^SUPABASE_PRODUCTION_DB_PASSWORD=" "$ENV_FILE"; then
    PROD_DB_PASSWORD=$(grep "^SUPABASE_PRODUCTION_DB_PASSWORD=" "$ENV_FILE" | cut -d= -f2-)
  else
    # Generate new password if it doesn't exist
    PROD_DB_PASSWORD=$(openssl rand -hex 16)
    echo "SUPABASE_PRODUCTION_DB_PASSWORD=$PROD_DB_PASSWORD" >> "$ENV_FILE"
    echo "Added: SUPABASE_PRODUCTION_DB_PASSWORD (generated) to $ENV_FILE"
  fi

  # Add SUPABASE_PRODUCTION_DB_PASSWORD to API env file
  if ! grep -q "^SUPABASE_PRODUCTION_DB_PASSWORD=" "$API_ENV_FILE"; then
    echo "SUPABASE_PRODUCTION_DB_PASSWORD=$PROD_DB_PASSWORD" >> "$API_ENV_FILE"
    echo "Added: SUPABASE_PRODUCTION_DB_PASSWORD to $API_ENV_FILE"
  fi

  echo "‚úÖ Database environment variables have been synchronized across all files."
}

# Command: stop Supabase
stop_supabase() {
  if ! command -v supabase >/dev/null 2>&1; then
    echo "Error: Supabase CLI is not installed. Please install it before" \
      "running this command." >&2
    echo "You can install it by running 'brew install supabase/tap/supabase'." \
      >&2
    exit 1
  fi

  if is_supabase_running; then
    echo "Stopping Supabase..."
    supabase stop --project-id "$SUPABASE_PROJECT_ID"
    echo "Supabase stopped."
  else
    echo "Supabase is not running."
  fi
}

# Command: start Supabase (restarts if already running)
start_supabase() {
  if ! command -v supabase >/dev/null 2>&1; then
    echo "Error: supabase CLI is not installed. Please install it before" \
      "running this command." >&2
    exit 1
  fi

  # Ensure SUPABASE_WORKDIR is set to 'infra'
  ensure_supabase_workdir

  if is_supabase_running; then
    echo "Supabase is already running. Restarting..."
    supabase stop --project-id "$SUPABASE_PROJECT_ID"
    echo "Supabase stopped."
  fi

  echo "Starting Supabase..."
  supabase start
  echo "Supabase started."
}

# Command: reset Supabase database
reset_db() {
  if ! command -v supabase >/dev/null 2>&1; then
    echo "Error: supabase CLI is not installed. Please install it before" \
      "running this command." >&2
    exit 1
  fi

  # Ensure SUPABASE_WORKDIR is set to 'infra'
  ensure_supabase_workdir

  echo "Resetting Supabase database..."
  echo "‚ö†Ô∏è  This will delete all data in your local database!"

  if is_supabase_running; then
    echo "Stopping Supabase with reset..."
    supabase stop --project-id "$SUPABASE_PROJECT_ID" --reset
    echo "Supabase stopped and reset."
  else
    echo "Supabase is not running. Running reset anyway..."
    supabase stop --project-id "$SUPABASE_PROJECT_ID" --reset
  fi

  echo "Starting Supabase..."
  supabase start
  echo "‚úÖ Supabase database has been reset and restarted."
}

# Main
COMMAND="$1"
case "$COMMAND" in
  init)
    init_project
    ;;
  create-new-project)
    create_new_project
    ;;
  set-vars)
    set_vars
    ;;
  start)
    start_supabase
    ;;
  stop)
    stop_supabase
    ;;
  reset-db)
    reset_db
    ;;
  ""|-h|--help|help)
    usage
    ;;
  *)
    echo "Unknown command: $COMMAND"
    usage
    ;;
esac
