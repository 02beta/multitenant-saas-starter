#!/bin/bash
echo
echo "--------------------------------"
echo "Initializing environment..."
echo "--------------------------------"
echo

# Set up CLI alias for easy access to the project CLI
if [ -f "scripts/cli.py" ]; then
  alias cli="python scripts/cli.py"
  echo "✓ CLI alias set up: 'cli' command is now available"
  echo "  Usage: cli --help, cli db --help, cli db init, etc."
  echo
else
  echo "Warning: CLI script not found at scripts/cli.py" >&2
fi

# Activate Python virtual environment if present
if [ -d "./.venv" ]; then
  echo "Activating Python virtual environment..."
  # shellcheck disable=SC1091
  source ./.venv/bin/activate
  echo "Python virtual environment activated."
else
  echo "No Python virtual environment found. Please create one by running 'python -m venv .venv' to continue." >&2
fi

# Use latest stable Node.js version (requires direnv + asdf or nvm)
if command -v asdf >/dev/null 2>&1; then
  asdf shell nodejs latest
elif command -v nvm >/dev/null 2>&1; then
  nvm install --lts
  nvm use --lts
fi

# Throw error if pnpm is not installed
if ! command -v pnpm >/dev/null 2>&1; then
  echo "Error: pnpm is not installed. Please install pnpm by running 'npm install -g pnpm' to continue." >&2
  exit 1
fi

# Run pnpm install if node_modules is not present
if [ ! -d "node_modules" ]; then
  echo "Installing dependencies..."
  pnpm install
  echo "Dependencies installed."
fi

if ! command -v supabase >/dev/null 2>&1; then
  echo "Error: supabase CLI is not installed. Please install it from https://supabase.com/docs/guides/cli before continuing." >&2
  exit 1
else
  # make sure the supabase cli uses the correct workdir
  export SUPABASE_WORKDIR="infra"

  # supabase start
  # Execute the db-admin script to set environment variables
  bash -c 'source scripts/db-admin.sh; set_vars'
  echo "Supabase CLI is installed. Using workdir: $SUPABASE_WORKDIR"
fi

# Export all variables from .env.local in the root of the repo
if [ -f ".env.local" ]; then
  echo "Found .env.local file, loading environment variables..."

  echo "Environment variables loaded from .env.local"

  # Display loaded variables (excluding sensitive ones)
  echo
  echo "Loaded environment variables:"
  env | grep -E "^(DATABASE_|SUPABASE_|LOG_)" | sort
  echo

  # Rename SUPABASE_DB_URL to DATABASE_URL and create DATABASE_ASYNC_URL
  if [ -n "$SUPABASE_DB_URL" ]; then
    # Only set DATABASE_URL if it's not already set
    if [ -z "$DATABASE_URL" ]; then
      export DATABASE_URL="$SUPABASE_DB_URL"
    fi
    # Only set DATABASE_ASYNC_URL if it's not already set
    if [ -z "$DATABASE_ASYNC_URL" ]; then
      export DATABASE_ASYNC_URL="${SUPABASE_DB_URL/postgresql:/postgresql+asyncpg:}"
    fi
    echo "Mapped Supabase database URLs:"
    echo "DATABASE_URL=$DATABASE_URL"
    echo "DATABASE_ASYNC_URL=$DATABASE_ASYNC_URL"
    echo
  fi

  # Comment out duplicate Supabase environment variables to avoid conflicts
  if [ -f ".env.local" ]; then
    SUPABASE_VARS_TO_COMMENT=(
      "SUPABASE_INBUCKET_URL"
      "SUPABASE_STUDIO_URL"
      "SUPABASE_GRAPHQL_URL"
      "SUPABASE_S3_PROTOCOL_ACCESS_KEY_ID"
      "SUPABASE_S3_PROTOCOL_ACCESS_KEY_SECRET"
      "SUPABASE_S3_PROTOCOL_REGION"
      "SUPABASE_STORAGE_S3_URL"
      "SUPABASE_SERVICE_ROLE_KEY"
    )

    for var in "${SUPABASE_VARS_TO_COMMENT[@]}"; do
      if grep -q "^$var=" .env.local; then
        # Use sed to comment out the line (add # at the beginning)
        sed -i.bak "s/^$var=/#$var=/" .env.local
        echo "Commented out duplicate: $var"
      fi
    done

    # Clean up backup file created by sed
    if [ -f ".env.local.bak" ]; then
      rm ".env.local.bak"
    fi

    # Use set -a to automatically export all variables
    set -a
    # shellcheck disable=SC1091
    source .env.local
    set +a
  fi

  # Verify required environment variables are present and not commented out
  REQUIRED_VARS=(
    "DATABASE_URL"
    "DATABASE_ASYNC_URL"
    "SUPABASE_API_URL"
    "SUPABASE_ANON_KEY"
    "SUPABASE_JWT_SECRET"
  )

  echo "Verifying required environment variables..."
  MISSING_VARS=()

  for var in "${REQUIRED_VARS[@]}"; do
    # Check if variable is set in environment
    if [ -z "${!var}" ]; then
      # Check if it exists in .env.local but is commented out
      if grep -q "^#.*$var=" .env.local 2>/dev/null; then
        echo "Warning: $var is commented out in .env.local - uncommenting..."
        sed -i.bak "s/^#\s*$var=/$var=/" .env.local
        # Source the file again to pick up the change
        if [ -f ".env.local" ]; then
          set -a
          source .env.local
          set +a
        fi
      else
        MISSING_VARS+=("$var")
      fi
    fi

    # Final check after potential uncommenting
    if [ -n "${!var}" ]; then
      echo "✓ $var is set"
    else
      echo "✗ $var is missing or empty"
    fi
  done

  if [ ${#MISSING_VARS[@]} -gt 0 ]; then
    echo
    echo "Error: The following required environment variables are missing:"
    for var in "${MISSING_VARS[@]}"; do
      echo "  - $var"
    done
    echo "Please ensure these variables are defined in .env.local"
    exit 1
  fi

  echo "✓ All required environment variables are present"
  echo

else
  echo "Warning: .env.local file not found in the root directory." >&2
fi
