#!/bin/bash
echo
echo "--------------------------------"
echo "Initializing environment..."
echo "--------------------------------"
echo

# Set up CLI alias for easy access to the project CLI
if [ -f "scripts/cli.py" ]; then
  alias cli="python scripts/cli.py"
  echo "✓ CLI alias set up: 'cli' command is now available"
  echo "  Usage: cli --help, cli db --help, cli db init, etc."
  echo
else
  echo "Warning: CLI script not found at scripts/cli.py" >&2
fi

# Activate Python virtual environment if present
if [ -d "./.venv" ]; then
  echo "Activating Python virtual environment..."
  # shellcheck disable=SC1091
  source ./.venv/bin/activate
  echo "Python virtual environment activated."
else
  echo "No Python virtual environment found. Please create one by running 'python -m venv .venv' to continue." >&2
fi

# Use latest stable Node.js version (requires direnv + asdf or nvm)
if command -v asdf >/dev/null 2>&1; then
  asdf shell nodejs latest
elif command -v nvm >/dev/null 2>&1; then
  nvm install --lts
  nvm use --lts
fi

# Throw error if pnpm is not installed
if ! command -v pnpm >/dev/null 2>&1; then
  echo "Error: pnpm is not installed. Please install pnpm by running 'npm install -g pnpm' to continue." >&2
  exit 1
fi

# Run pnpm install if node_modules is not present
if [ ! -d "node_modules" ]; then
  echo "Installing dependencies..."
  pnpm install
  echo "Dependencies installed."
fi

# Check supabase cli present and start it if not running
if ! command -v supabase >/dev/null 2>&1; then
  echo "Error: supabase cli is not installed. Please install supabase cli by running 'npm install -g supabase' to continue." >&2
  exit 1
fi
if ! supabase status | grep -q "Connected"; then
  echo "Starting supabase cli..."
  echo "Setting SUPABASE_WORKDIR to infra/"
  export SUPABASE_WORKDIR=infra
  cli db start
  echo "Supabase cli started."
fi

# Detect environment and source appropriate env file
if [ -n "$VERCEL" ] || [ -n "$RAILWAY_ENVIRONMENT" ] || [ -n "$HEROKU_APP_NAME" ] || [ -n "$AWS_LAMBDA_FUNCTION_NAME" ] || [ -n "$GOOGLE_CLOUD_PROJECT" ] || [ -n "$AZURE_FUNCTIONS_ENVIRONMENT" ]; then
  export ENVIRONMENT="production"
  echo "Detected production environment"
elif [ -n "$CI" ] || [ -n "$GITHUB_ACTIONS" ] || [ -n "$GITLAB_CI" ] || [ -n "$JENKINS_URL" ]; then
  export ENVIRONMENT="ci"
  echo "Detected CI environment"
else
  export ENVIRONMENT="local"
  echo "Detected local environment"
  if [ -f ".env.development.local" ]; then
    set -a
    # shellcheck disable=SC1091
    source .env.development.local
    set +a
    echo "✓ Sourced .env.development.local"
  fi
fi

echo
echo "--------------------------------"
echo "Environment initialization complete"
echo "--------------------------------"
echo
