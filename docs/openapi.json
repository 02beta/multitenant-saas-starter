{
  "openapi": "3.1.0",
  "info": {
    "title": "Multi-tenant SaaS API",
    "description": "API for the Multi-tenant SaaS application (DB schema-aligned)",
    "version": "0.0.1"
  },
  "paths": {
    "/v1/users/": {
      "post": {
        "tags": ["users"],
        "summary": "Create User",
        "description": "Create a new user in usr.users. Requires full_name, email, auth_user_id, and hashed_password.",
        "operationId": "create_user_v1_users__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserPublic" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["users"],
        "summary": "List Users",
        "description": "List users from usr.users with pagination.",
        "operationId": "list_users_v1_users__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Active Only"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserPublic" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}": {
      "get": {
        "tags": ["users"],
        "summary": "Get User",
        "description": "Get a user by ID from usr.users.",
        "operationId": "get_user_v1_users__user_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserPublic" }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update User",
        "description": "Update a user in usr.users.",
        "operationId": "update_user_v1_users__user_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserPublic" }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Soft Delete User",
        "description": "Soft delete a user (sets deleted_at) in usr.users.",
        "operationId": "delete_user_v1_users__user_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "User soft deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/v1/organizations/": {
      "post": {
        "tags": ["organizations"],
        "summary": "Create Organization",
        "description": "Create a new organization in org.organizations.",
        "operationId": "create_organization_v1_organizations__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrganizationCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrganizationPublic" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["organizations"],
        "summary": "List Organizations",
        "description": "List organizations from org.organizations.",
        "operationId": "list_organizations_v1_organizations__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/OrganizationPublic" }
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{organization_id}": {
      "get": {
        "tags": ["organizations"],
        "summary": "Get Organization",
        "description": "Get an organization by ID from org.organizations.",
        "operationId": "get_organization_v1_organizations__organization_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrganizationPublic" }
              }
            }
          },
          "404": {
            "description": "Organization not found"
          }
        }
      },
      "put": {
        "tags": ["organizations"],
        "summary": "Update Organization",
        "description": "Update an organization in org.organizations.",
        "operationId": "update_organization_v1_organizations__organization_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrganizationUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrganizationPublic" }
              }
            }
          },
          "404": {
            "description": "Organization not found"
          }
        }
      },
      "delete": {
        "tags": ["organizations"],
        "summary": "Soft Delete Organization",
        "description": "Soft delete an organization (sets deleted_at) in org.organizations.",
        "operationId": "delete_organization_v1_organizations__organization_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization soft deleted"
          },
          "404": {
            "description": "Organization not found"
          }
        }
      }
    },
    "/v1/memberships/": {
      "post": {
        "tags": ["memberships"],
        "summary": "Create Membership",
        "description": "Create a new membership in org.memberships.",
        "operationId": "create_membership_v1_memberships__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MembershipCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MembershipPublic" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["memberships"],
        "summary": "List Memberships",
        "description": "List memberships from org.memberships.",
        "operationId": "list_memberships_v1_memberships__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 0, "title": "Skip" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 100, "title": "Limit" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of memberships",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MembershipPublic" }
                }
              }
            }
          }
        }
      }
    },
    "/v1/memberships/{membership_id}": {
      "get": {
        "tags": ["memberships"],
        "summary": "Get Membership",
        "description": "Get a membership by ID from org.memberships.",
        "operationId": "get_membership_v1_memberships__membership_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "membership_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Membership Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Membership found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MembershipPublic" }
              }
            }
          },
          "404": {
            "description": "Membership not found"
          }
        }
      },
      "put": {
        "tags": ["memberships"],
        "summary": "Update Membership",
        "description": "Update a membership in org.memberships.",
        "operationId": "update_membership_v1_memberships__membership_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "membership_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Membership Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MembershipUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MembershipPublic" }
              }
            }
          },
          "404": {
            "description": "Membership not found"
          }
        }
      },
      "delete": {
        "tags": ["memberships"],
        "summary": "Soft Delete Membership",
        "description": "Soft delete a membership (sets deleted_at) in org.memberships.",
        "operationId": "delete_membership_v1_memberships__membership_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "membership_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Membership Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Membership soft deleted"
          },
          "404": {
            "description": "Membership not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserCreate": {
        "type": "object",
        "required": ["full_name", "email", "auth_user_id", "hashed_password"],
        "properties": {
          "full_name": {
            "type": "string",
            "maxLength": 64,
            "title": "Full Name"
          },
          "email": {
            "type": "string",
            "maxLength": 320,
            "title": "Email"
          },
          "auth_user_id": {
            "type": "string",
            "format": "uuid",
            "title": "Auth User Id"
          },
          "hashed_password": {
            "type": "string",
            "maxLength": 512,
            "title": "Hashed Password"
          },
          "phone": {
            "type": "string",
            "maxLength": 20,
            "title": "Phone"
          },
          "avatar_url": {
            "type": "string",
            "maxLength": 512,
            "title": "Avatar URL"
          },
          "permissions": {
            "type": "object",
            "title": "Permissions"
          },
          "is_active": {
            "type": "boolean",
            "default": true,
            "title": "Is Active"
          },
          "is_superuser": {
            "type": "boolean",
            "default": false,
            "title": "Is Superuser"
          }
        },
        "title": "UserCreate",
        "description": "Schema for creating users in usr.users."
      },
      "UserPublic": {
        "type": "object",
        "required": [
          "id",
          "full_name",
          "email",
          "is_active",
          "is_superuser",
          "created_at"
        ],
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "full_name": { "type": "string", "title": "Full Name" },
          "email": { "type": "string", "title": "Email" },
          "phone": { "type": "string", "title": "Phone" },
          "avatar_url": { "type": "string", "title": "Avatar URL" },
          "auth_user_id": {
            "type": "string",
            "format": "uuid",
            "title": "Auth User Id"
          },
          "permissions": { "type": "object", "title": "Permissions" },
          "is_active": { "type": "boolean", "title": "Is Active" },
          "is_superuser": { "type": "boolean", "title": "Is Superuser" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "title": "UserPublic",
        "description": "Public user schema for API responses from usr.users."
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "maxLength": 64,
            "title": "Full Name"
          },
          "email": {
            "type": "string",
            "maxLength": 320,
            "title": "Email"
          },
          "phone": {
            "type": "string",
            "maxLength": 20,
            "title": "Phone"
          },
          "avatar_url": {
            "type": "string",
            "maxLength": 512,
            "title": "Avatar URL"
          },
          "permissions": {
            "type": "object",
            "title": "Permissions"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Is Superuser"
          }
        },
        "title": "UserUpdate",
        "description": "Schema for updating users in usr.users."
      },
      "OrganizationCreate": {
        "type": "object",
        "required": ["name", "slug"],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "maxLength": 50,
            "title": "Slug"
          },
          "avatar_url": {
            "type": "string",
            "maxLength": 512,
            "title": "Avatar URL"
          },
          "is_active": {
            "type": "boolean",
            "default": true,
            "title": "Is Active"
          },
          "owner_id": {
            "type": "string",
            "format": "uuid",
            "title": "Owner Id"
          }
        },
        "title": "OrganizationCreate",
        "description": "Schema for creating organizations in org.organizations."
      },
      "OrganizationPublic": {
        "type": "object",
        "required": ["id", "name", "slug", "is_active", "created_at"],
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "name": { "type": "string", "title": "Name" },
          "slug": { "type": "string", "title": "Slug" },
          "avatar_url": { "type": "string", "title": "Avatar URL" },
          "is_active": { "type": "boolean", "title": "Is Active" },
          "owner_id": {
            "type": "string",
            "format": "uuid",
            "title": "Owner Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "title": "OrganizationPublic",
        "description": "Public organization schema for API responses from org.organizations."
      },
      "OrganizationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "maxLength": 50,
            "title": "Slug"
          },
          "avatar_url": {
            "type": "string",
            "maxLength": 512,
            "title": "Avatar URL"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "owner_id": {
            "type": "string",
            "format": "uuid",
            "title": "Owner Id"
          }
        },
        "title": "OrganizationUpdate",
        "description": "Schema for updating organizations in org.organizations."
      },
      "MembershipCreate": {
        "type": "object",
        "required": ["organization_id", "user_id"],
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "role": {
            "type": "integer",
            "enum": [0, 1, 2],
            "default": 2,
            "title": "Role"
          },
          "status": {
            "type": "integer",
            "enum": [0, 1],
            "default": 0,
            "title": "Status"
          },
          "invited_by": {
            "type": "string",
            "format": "uuid",
            "title": "Invited By"
          },
          "invited_at": {
            "type": "string",
            "format": "date-time",
            "title": "Invited At"
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Accepted At"
          }
        },
        "title": "MembershipCreate",
        "description": "Schema for creating memberships in org.memberships."
      },
      "MembershipPublic": {
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "user_id",
          "role",
          "status",
          "created_at"
        ],
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "user_id": { "type": "string", "format": "uuid", "title": "User Id" },
          "role": { "type": "integer", "enum": [0, 1, 2], "title": "Role" },
          "status": { "type": "integer", "enum": [0, 1], "title": "Status" },
          "invited_by": {
            "type": "string",
            "format": "uuid",
            "title": "Invited By"
          },
          "invited_at": {
            "type": "string",
            "format": "date-time",
            "title": "Invited At"
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Accepted At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "title": "MembershipPublic",
        "description": "Public membership schema for API responses from org.memberships."
      },
      "MembershipUpdate": {
        "type": "object",
        "properties": {
          "role": {
            "type": "integer",
            "enum": [0, 1, 2],
            "title": "Role"
          },
          "status": {
            "type": "integer",
            "enum": [0, 1],
            "title": "Status"
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Accepted At"
          }
        },
        "title": "MembershipUpdate",
        "description": "Schema for updating memberships in org.memberships."
      },
      "HTTPValidationError": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ValidationError" }
          }
        },
        "title": "HTTPValidationError"
      },
      "ValidationError": {
        "type": "object",
        "required": ["loc", "msg", "type"],
        "properties": {
          "loc": {
            "type": "array",
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] }
          },
          "msg": { "type": "string" },
          "type": { "type": "string" }
        },
        "title": "ValidationError"
      }
    },
    "securitySchemes": { "HTTPBearer": { "type": "http", "scheme": "bearer" } }
  }
}
